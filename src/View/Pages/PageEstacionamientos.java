/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Panel.java to edit this template
 */
package View.Pages;

import BusinessEntity.ClienteBE;
import BusinessEntity.ComprobanteBE;
import BusinessEntity.EstacionamientoBE;
import BusinessEntity.MaestroDetalleBE;
import BusinessEntity.TarifaBE;
import BusinessEntity.VehiculoBE;
import BusinessEntity.ZonaParkingBE;
import BusinessLogic.ClienteBL;
import BusinessLogic.ComprobanteBL;
import BusinessLogic.EstacionamientoBL;
import BusinessLogic.MaestroDetalleBL;
import BusinessLogic.TarifaBL;
import BusinessLogic.VehiculoBL;
import BusinessLogic.ZonaParkingBL;
import DTOs.EstacionamientoDTO;
import Enums.EstadoComprobanteEnum;
import Enums.EstadoEstacionamientoEnum;
import View.Forms.FormMenu;
import View.Modals.ModalEstacionamiento;
import java.awt.Component;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Royss
 */
public class PageEstacionamientos extends java.awt.Panel {

    private EstacionamientoBL estacionamientoBL;
    private ComprobanteBL comprobanteBL;
    private VehiculoBL vehiculoBL;
    private ClienteBL clienteBL;
    private MaestroDetalleBL maestroDetalleBL;
    private ZonaParkingBL zonaBL;
    private TarifaBL tarifaBL;
    private List<EstacionamientoDTO> estacionamientosDto;

    public PageEstacionamientos() {
        initComponents();
        estacionamientoBL = new EstacionamientoBL();
        vehiculoBL = new VehiculoBL();
        clienteBL = new ClienteBL();
        maestroDetalleBL = new MaestroDetalleBL();
        zonaBL = new ZonaParkingBL();
        tarifaBL = new TarifaBL();
        comprobanteBL = new ComprobanteBL();
        jScrollPane2.setPreferredSize(new Dimension(1000, 400));
        cargarEstacionamientos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnNuevo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEstacionamiento = new javax.swing.JTable();
        btnRecargar = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Listado de Estacionamientos");

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        tblEstacionamiento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblEstacionamiento.setAutoscrolls(false);
        tblEstacionamiento.setEditingColumn(1);
        tblEstacionamiento.setEditingRow(1);
        tblEstacionamiento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEstacionamientoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblEstacionamiento);

        btnRecargar.setLabel("Recargar");
        btnRecargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNuevo)
                        .addGap(18, 18, 18)
                        .addComponent(btnRecargar))
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevo)
                    .addComponent(btnRecargar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tblEstacionamientoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEstacionamientoMouseClicked
        int fila = tblEstacionamiento.rowAtPoint(evt.getPoint());
        int columna = tblEstacionamiento.columnAtPoint(evt.getPoint());

        if (fila >= 0) {
            if (columna == 10) {
                String id = (String) tblEstacionamiento.getValueAt(fila, 0);

                EstacionamientoDTO estacionamiento = estacionamientosDto.stream().filter(e -> e.getId().toString().equals(id)).findFirst().get();

                ModalEstacionamiento mEstacionamiento = new ModalEstacionamiento(new FormMenu(), true);
                mEstacionamiento.setEstacionamientoCrearDTO(estacionamiento);
                mEstacionamiento.pack();
                mEstacionamiento.setLocationRelativeTo(null);
                mEstacionamiento.setVisible(true);

            } else if (columna == 11) {
                int confirmacion = JOptionPane.showConfirmDialog(null, "¿Deseas eliminar este registro?", "Confirmar", JOptionPane.YES_NO_OPTION);
                if (confirmacion == JOptionPane.YES_OPTION) {
                    String id = (String) tblEstacionamiento.getValueAt(fila, 0);
                    estacionamientoBL.eliminar(id);
                    JOptionPane.showMessageDialog(null, "Estacionamiento eliminado", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                    cargarEstacionamientos();
                }
            } else if (columna == 12) {
                int confirmacion = JOptionPane.showConfirmDialog(null, "¿Deseas generar el comprobante?", "Confirmar", JOptionPane.YES_NO_OPTION);
                if (confirmacion == JOptionPane.YES_OPTION) {
                    String id = (String) tblEstacionamiento.getValueAt(fila, 0);
                    EstacionamientoDTO estacionamiento = estacionamientosDto.stream().filter(e -> e.getId().toString().equals(id)).findFirst().get();
                    comprobanteBL.guardar(estacionamiento);
                    estacionamientoBL.actualizarEstado(id, EstadoEstacionamientoEnum.FINALIZADO.getValor());
                    JOptionPane.showMessageDialog(null, "Comprobante generado", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_tblEstacionamientoMouseClicked

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        ModalEstacionamiento mEstacionamiento = new ModalEstacionamiento(new FormMenu(), true);
        mEstacionamiento.pack();
        mEstacionamiento.setLocationRelativeTo(null);
        mEstacionamiento.setVisible(true);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnRecargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecargarActionPerformed
        cargarEstacionamientos();
    }//GEN-LAST:event_btnRecargarActionPerformed

    private void cargarEstacionamientos() {
        List<EstacionamientoBE> estacionamientos = estacionamientoBL.obtenerTodo();
        estacionamientosDto = new ArrayList<EstacionamientoDTO>();
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        modelo.setColumnIdentifiers(new Object[]{
            "",
            "Cliente",
            "Nro Documento",
            "Vehículo",
            "Tipo",
            "Zona",
            "Tarifa",
            "Cantidad",
            "Total",
            "Estado",
            "",
            "",
            ""
        });

        for (EstacionamientoBE estacionamiento : estacionamientos) {
            VehiculoBE vehiculo = vehiculoBL.obtenerPorId(estacionamiento.getIdVehiculo().toString());
            ClienteBE cliente = clienteBL.obtenerPorId(vehiculo.getIdCliente().toString());
            MaestroDetalleBE tipoVehiculo = maestroDetalleBL.obtenerPorId(vehiculo.getIdTipoVehiculo());
            ZonaParkingBE zonaParking = zonaBL.obtenerPorId(estacionamiento.getIdZonaParking());
            TarifaBE tarifa = tarifaBL.obtenerPorId(estacionamiento.getIdTarifa().toString());
            MaestroDetalleBE estado = maestroDetalleBL.obtenerPorId(estacionamiento.getIdEstado());

            modelo.addRow(new Object[]{
                estacionamiento.getId().toString(),
                cliente.getNombre() + " " + cliente.getApellidos(),
                cliente.getDocumento(),
                vehiculo.getPlaca(),
                tipoVehiculo.getValor(),
                zonaParking.getNombre(),
                tarifa.getNombre(),
                estacionamiento.getCantidad(),
                tarifa.getPrecioBase() * estacionamiento.getCantidad(),
                estado.getValor(),
                new ImageIcon(getClass().getResource("/Recursos/editar.png")),
                new ImageIcon(getClass().getResource("/Recursos/eliminar.png")),
                new ImageIcon(getClass().getResource("/Recursos/comprobante.png")),});

            EstacionamientoDTO estacionamientoDto = new EstacionamientoDTO();
            estacionamientoDto.setId(estacionamiento.getId().toString());
            estacionamientoDto.setCantidad(estacionamiento.getCantidad());
            estacionamientoDto.setCliente(cliente);
            estacionamientoDto.setTarifa(tarifa);
            estacionamientoDto.setVehiculo(vehiculo);
            estacionamientoDto.setZonaParking(zonaParking);
            estacionamientoDto.setTipoVehiculo(tipoVehiculo);
            estacionamientosDto.add(estacionamientoDto);
        }

        tblEstacionamiento.setModel(modelo);

        DefaultTableCellRenderer iconRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = new JLabel();
                label.setHorizontalAlignment(JLabel.CENTER);
                if (value instanceof Icon) {
                    label.setIcon((Icon) value);
                }
                return label;
            }
        };

        tblEstacionamiento.getColumnModel().getColumn(0).setMaxWidth(0);
        tblEstacionamiento.getColumnModel().getColumn(0).setMinWidth(0);
        tblEstacionamiento.getColumnModel().getColumn(0).setWidth(0);
        tblEstacionamiento.getColumnModel().getColumn(10).setCellRenderer(iconRenderer);
        tblEstacionamiento.getColumnModel().getColumn(11).setCellRenderer(iconRenderer);
        tblEstacionamiento.getColumnModel().getColumn(12).setCellRenderer(iconRenderer);
        tblEstacionamiento.setRowHeight(25);
        tblEstacionamiento.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblEstacionamiento.setPreferredScrollableViewportSize(tblEstacionamiento.getPreferredSize());

        anchoColumnas();
    }

    private void anchoColumnas() {
        TableColumnModel columnModel = tblEstacionamiento.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(0); // Cliente
        columnModel.getColumn(1).setPreferredWidth(250); // Cliente
        columnModel.getColumn(2).setPreferredWidth(100); // Documento
        columnModel.getColumn(3).setPreferredWidth(100); // Placa
        columnModel.getColumn(4).setPreferredWidth(80);  // Tipo
        columnModel.getColumn(5).setPreferredWidth(120); // Zona
        columnModel.getColumn(6).setPreferredWidth(100); // Tarifa
        columnModel.getColumn(7).setPreferredWidth(80);  // Cantidad
        columnModel.getColumn(8).setPreferredWidth(100); // Total
        columnModel.getColumn(9).setPreferredWidth(100); // Estado
        columnModel.getColumn(10).setPreferredWidth(50);  // Editar
        columnModel.getColumn(11).setPreferredWidth(50); // Eliminar
        columnModel.getColumn(12).setPreferredWidth(50); // Comprobante
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnRecargar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblEstacionamiento;
    // End of variables declaration//GEN-END:variables
}
